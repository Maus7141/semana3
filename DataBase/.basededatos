----------ELIMINA DROP PROCEDUDERE
DROP PROCEDURE ELIMINAR_ESTATUS;
DROP PROCEDURE CREAR_EDITAR_AEROPUERTO;
DROP PROCEDURE CREAR_EDITAR_AVION;
DROP PROCEDURE SP_REGISTRAR_AVION;
DROP PROCEDURE CREAR_EDITAR_VUELO;
DROP PROCEDURE SP_UPSERT_ESTATUS;
DROP PROCEDURE ELIMINAR_VUELO;
DROP PROCEDURE CREAR_EDITAR_AEROPUERTO;
DROP PROCEDURE ELIMINAR_AVION;
DROP PROCEDURE ELIMINAR_AEROPUERTO;
DROP PROCEDURE ELIMINAR_AEROLINEA;



-----ELIMANIAR TABLAS------------
DROP TABLE ESTATUS;
DROP TABLE VUELO;
DROP TABLE AVION;
DROP TABLE AEROPUERTO;

---------ELIMINA SECUENCIAS---------------
DROP SEQUENCE VUELO_SEQ;
DROP SEQUENCE AVION_SEQ;
DROP SEQUENCE AEROPUERTO_SEQ;
DROP SEQUENCE ESTATUS_SEQ;
DROP SEQUENCE AEROLINEA_SEQ;

----------CREA SECUENCIAS--------- 
CREATE SEQUENCE ESTATUS_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;


CREATE SEQUENCE AEROLINEA_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE AEROPUERTO_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE AVION_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

CREATE SEQUENCE VUELO_SEQ 
    START WITH 1
    INCREMENT BY 1
    NOCACHE
    NOCYCLE;

------FIN DE SECUENCIAS----------------------

------CREACION DE TABLAS---------------------
CREATE TABLE ESTATUS(
ID_ESTATUS NUMBER DEFAULT ESTATUS_SEQ.NEXTVAL,
DESCRIPCION VARCHAR2(50),
CONSTRAINT ESTATUS_PK PRIMARY KEY (ID_ESTATUS)
);



CREATE TABLE AEROLINEA(
ID_AEROLINEA NUMBER DEFAULT AEROLINEA_SEQ.NEXTVAL,
NOMBRE VARCHAR2(50),
IATA VARCHAR2(50),
PAIS VARCHAR2(50),
DESCRIPCION VARCHAR2(50),
FECHA_FUNDACION DATE NOT NULL,
ID_ESTATUS NUMBER,
CONSTRAINT AEROLINEA_PK PRIMARY KEY (ID_AEROLINEA),
CONSTRAINT ESTATUS_AEROLINEA_FK FOREIGN KEY(ID_ESTATUS) 
REFERENCES ESTATUS(ID_ESTATUS)
);

CREATE TABLE AEROPUERTO(
ID_AEROPUERTO NUMBER DEFAULT AEROPUERTO_SEQ.NEXTVAL,
NOMBRE    VARCHAR2 (50),
CODIGO    VARCHAR2 (50),
LATITUD   VARCHAR2 (50),
LONGITUD  VARCHAR2 (50),
PAIS      VARCHAR2 (50),
ID_ESTATUS NUMBER,
CONSTRAINT AEROPUERTO_PK PRIMARY KEY (ID_AEROPUERTO),
CONSTRAINT ESTATUS_AEROPUERTO_FK FOREIGN KEY(ID_ESTATUS) 
REFERENCES ESTATUS(ID_ESTATUS)
);

CREATE TABLE AVION(
    ID_AVION NUMBER DEFAULT AVION_SEQ.NEXTVAL,
    NUM_REGISTRO NUMBER,
    TIPO VARCHAR2(50),
    CODIGO_MODELO VARCHAR2(50),
    CAPACIDAD NUMBER CHECK(CAPACIDAD > 0) NOT NULL,
    FECHA_PRIMER_VUELO DATE NOT NULL,
    ID_ESTATUS NUMBER,
    ID_AEROLINEA NUMBER,
    CONSTRAINT AVION_PK PRIMARY KEY (ID_AVION),
    CONSTRAINT ESTATUS_AVION_FK FOREIGN KEY(ID_ESTATUS) 
    REFERENCES ESTATUS(ID_ESTATUS),
    CONSTRAINT AEROLINEA_AVION_FK FOREIGN KEY(ID_AEROLINEA) 
    REFERENCES AEROLINEA(ID_AEROLINEA)
);

CREATE TABLE VUELO(
    ID_VUELO NUMBER DEFAULT VUELO_SEQ.NEXTVAL,
    CODIGO_VUELO VARCHAR2(50),
    ID_AVION NUMBER,
    ID_ORIGEN NUMBER,
    ID_DESTINO NUMBER,
    FECHA_SALIDA DATE NOT NULL,
    ID_ESTATUS NUMBER,
CONSTRAINT VUELO_PK PRIMARY KEY (ID_VUELO),
CONSTRAINT VUELO_CODIGO_VUELO_UN UNIQUE (CODIGO_VUELO),
CONSTRAINT FK_AVION_VUELO FOREIGN KEY (ID_AVION) 
        REFERENCES AVION(ID_AVION),
CONSTRAINT FK_DESTINO_VUELO FOREIGN KEY (ID_DESTINO) 
        REFERENCES AEROPUERTO(ID_AEROPUERTO),
CONSTRAINT FK_ORIGEN_VUELO FOREIGN KEY (ID_ORIGEN) 
        REFERENCES AEROPUERTO(ID_AEROPUERTO),
CONSTRAINT FK_ESTATUS_VUELO FOREIGN KEY (ID_ESTATUS) 
        REFERENCES ESTATUS(ID_ESTATUS)
);

--------Fin de la creacion de tablas---------------------------


-- Insertar datos--------------

INSERT INTO ESTATUS (DESCRIPCION) VALUES ('Activo');
INSERT INTO ESTATUS (DESCRIPCION) VALUES ('Inactivo');




-- Aerolíneas principales-----------
INSERT INTO AEROLINEA (NOMBRE, IATA, PAIS, FECHA_FUNDACION, ID_ESTATUS)
VALUES ('Aerolínea Mexicana', 'MXA', 'México', TO_DATE('2000-01-01', 'YYYY-MM-DD'), 1);

INSERT INTO AEROLINEA (NOMBRE, IATA, PAIS, FECHA_FUNDACION, ID_ESTATUS)
VALUES ('AeroMexico', 'MYY', 'México', TO_DATE('1999-11-10', 'YYYY-MM-DD'), 1);

INSERT INTO AEROLINEA (NOMBRE, IATA, PAIS, FECHA_FUNDACION, ID_ESTATUS)
VALUES ('Viva Aerobus', 'VMX', 'México', TO_DATE('1989-03-15', 'YYYY-MM-DD'), 1);



-- Aeropuertos internacionales
INSERT INTO AEROPUERTO (NOMBRE, CODIGO, LATITUD, LONGITUD, PAIS, ID_ESTATUS) 
VALUES ('Aeropuerto El Dorado', 'BOG', '4.70159', '-74.1469', 'Colombia', 1);

INSERT INTO AEROPUERTO (NOMBRE, CODIGO, LATITUD, LONGITUD, PAIS, ID_ESTATUS) 
VALUES ('Aeropuerto Jorge Chávez', 'LIM', '-12.0219', '-77.1143', 'Perú', 1);

INSERT INTO AEROPUERTO (NOMBRE, CODIGO, LATITUD, LONGITUD, PAIS, ID_ESTATUS) 
VALUES ('Aeropuerto Tocumen', 'PTY', '9.07136', '-79.3835', 'Panamá', 1);

INSERT INTO AEROPUERTO (NOMBRE, CODIGO, LATITUD, LONGITUD, PAIS, ID_ESTATUS) 
VALUES ('Aeropuerto Miami International', 'MIA', '25.7932', '-80.2906', 'Estados Unidos', 1);



-- Aviones de Avianca
INSERT INTO AVION (NUM_REGISTRO, TIPO, CODIGO_MODELO, CAPACIDAD, FECHA_PRIMER_VUELO, ID_ESTATUS, ID_AEROLINEA) 
VALUES (             '2010', 'Airbus A320', '320214', 180, TO_DATE('15-MAR-2015', 'DD-MON-YYYY'), 3, 2);

INSERT INTO AVION (NUM_REGISTRO, TIPO, CODIGO_MODELO, CAPACIDAD, FECHA_PRIMER_VUELO, ID_ESTATUS, ID_AEROLINEA) 
VALUES ('2011', 'Boeing 787-8', '55788', 250, TO_DATE('22-JUN-2018', 'DD-MON-YYYY'), 5, 4);

-- Aviones de LATAM
INSERT INTO AVION (NUM_REGISTRO, TIPO, CODIGO_MODELO, CAPACIDAD, FECHA_PRIMER_VUELO, ID_ESTATUS, ID_AEROLINEA) 
VALUES ('3010', 'Airbus 77321', '321231', 220, TO_DATE('10-SEP-2019', 'DD-MON-YYYY'), 1, 5);

INSERT INTO AVION (NUM_REGISTRO, TIPO, CODIGO_MODELO, CAPACIDAD, FECHA_PRIMER_VUELO, ID_ESTATUS, ID_AEROLINEA) 
VALUES ('3011', 'Boeing 767-300', '887638', 221, TO_DATE('05-JUN-2017', 'DD-MON-YYYY'), 3, 2); -- En mantenimiento


-- Vuelos regulares
INSERT INTO VUELO (CODIGO_VUELO, ID_AVION, ID_ORIGEN, ID_DESTINO, FECHA_SALIDA, ID_ESTATUS) 
VALUES ('44203', 3, 3, 2, TO_DATE('25-JUN-2023 08:30', 'DD-MON-YYYY HH24:MI'), 1);

INSERT INTO VUELO (CODIGO_VUELO, ID_AVION, ID_ORIGEN, ID_DESTINO, FECHA_SALIDA, ID_ESTATUS) 
VALUES ('4877' , 5, 4, 4, TO_DATE('25-JUN-2023 08:30', 'DD-MON-YYYY HH24:MI'), 1);

INSERT INTO VUELO (CODIGO_VUELO, ID_AVION, ID_ORIGEN, ID_DESTINO, FECHA_SALIDA, ID_ESTATUS) 
VALUES ('5566', 4, 3, 1, TO_DATE('26-JUN-2023 10:00', 'DD-MON-YYYY HH24:MI'), 1);


--------------Crea y remplaza los parametros y verifica---------------------------

--actualizar estatus
CREATE OR REPLACE PROCEDURE SP_UPSERT_ESTATUS(
    p_id_estatus IN NUMBER,
    p_descripcion IN VARCHAR2
)
IS
    v_count NUMBER;
BEGIN
    -- Verificar si el registro existe
    SELECT COUNT(*) INTO v_count 
    FROM ESTATUS 
    WHERE ID_ESTATUS = p_id_estatus;
    
    IF v_count = 0 THEN
        -- Insertar nuevo registro
        INSERT INTO ESTATUS (ID_ESTATUS, DESCRIPCION)
        VALUES (p_id_estatus, p_descripcion);
        
        DBMS_OUTPUT.PUT_LINE('Estatus creado exitosamente');
    ELSE
        -- Actualizar registro existente
        UPDATE ESTATUS
        SET DESCRIPCION = p_descripcion
        WHERE ID_ESTATUS = p_id_estatus;
        
        DBMS_OUTPUT.PUT_LINE('Estatus actualizado exitosamente');
    END IF;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK;
END;
/
---
INSERT INTO ESTATUS (ID_ESTATUS, DESCRIPCION) VALUES (1, 'ACTIVO');
INSERT INTO ESTATUS (ID_ESTATUS, DESCRIPCION) VALUES (2, 'INACTIVO');
COMMIT;

--CREAR O EDITAR AEROLINEA
CREATE OR REPLACE PROCEDURE CREAR_EDITAR_AEROLINEA (
    P_ID_AEROLINEA IN NUMBER DEFAULT NULL,
    P_NOMBRE IN VARCHAR2,
    P_IATA IN VARCHAR2,
    P_PAIS IN VARCHAR2,
    P_FECHA_FUNDACION IN DATE,
    P_ID_ESTATUS IN NUMBER
) IS
    V_EXISTE NUMBER := 0;
BEGIN
    -- Validar campo NOT NULL
    IF P_NOMBRE IS NULL OR P_IATA IS NULL OR P_PAIS 
    IS NULL OR P_FECHA_FUNDACION IS NULL OR P_ID_ESTATUS IS NULL THEN
        RAISE_APPLICATION_ERROR
        (-20001, 'Todos los campos son obligatorios.');
    END IF;
    
    -- Validar fecha
    IF P_FECHA_FUNDACION >= TRUNC(SYSDATE) THEN -- Si la fecha de fundación es hoy o en el futuro → Se dispara el error
        RAISE_APPLICATION_ERROR -- Lanza un error controlado
        (-20002, 'La fecha de fundación debe ser anterior a hoy.');
    END IF;

    -- Si se especifica ID, verificar si existe
    IF P_ID_AEROLINEA IS NOT NULL THEN
        SELECT COUNT(*) INTO V_EXISTE
        FROM AEROLINEA
        WHERE ID_AEROLINEA = P_ID_AEROLINEA;

        IF V_EXISTE = 0 THEN
            RAISE_APPLICATION_ERROR
            (-20003, 'La aerolínea con el ID proporcionado no existe. No se puede actualizar.');
        END IF; -- Este fragmento de código PL/SQL verifica si un registro existe antes de intentar actualizarlo

        -- Editar aerolínea existente
        UPDATE AEROLINEA
        SET NOMBRE = P_NOMBRE,
            IATA = P_IATA,
            PAIS = P_PAIS,
            FECHA_FUNDACION = P_FECHA_FUNDACION,
            ID_ESTATUS = P_ID_ESTATUS
        WHERE ID_AEROLINEA = P_ID_AEROLINEA;
    
    
    --COMPROBAR ACTUALIZACION ALGUNA FILA
    IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20001, 'NO SE EMCOTRO AEROLINEA CON EL ID PROPORCIONADO');
            END IF;
    
    ELSE
        -- Crear nueva aerolínea
        INSERT INTO AEROLINEA (
            ID_AEROLINEA, NOMBRE, IATA, PAIS, FECHA_FUNDACION, ID_ESTATUS
        ) VALUES (
            AEROLINEA_SEQ.NEXTVAL, P_NOMBRE, P_IATA, P_PAIS, P_FECHA_FUNDACION, P_ID_ESTATUS
        );
    END IF;

    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE CREAR_EDITAR_AEROPUERTO (
    P_ID_AEROPUERTO IN NUMBER DEFAULT NULL,
    P_NOMBRE IN VARCHAR2,
    P_CODIGO IN VARCHAR2,
    P_LATITUD IN VARCHAR2,
    P_LONGITUD IN VARCHAR2,
    P_PAIS IN VARCHAR2,
    P_ID_ESTATUS IN NUMBER
) IS
    V_EXISTE NUMBER := 0;
BEGIN
    -- Validar campos obligatorios
    IF P_NOMBRE IS NULL OR P_CODIGO IS NULL OR P_LATITUD IS NULL OR 
       P_LONGITUD IS NULL OR P_PAIS IS NULL OR P_ID_ESTATUS IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Todos los campos son obligatorios.');
    END IF;
CALL
    -- Si se especifica ID, verificar si existe
    IF P_ID_AEROPUERTO IS NOT NULL THEN
        SELECT COUNT(*) INTO V_EXISTE
        FROM AEROPUERTO
        WHERE ID_AEROPUERTO = P_ID_AEROPUERTO;

        IF V_EXISTE = 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 
            'El aeropuerto con el ID proporcionado no existe. No se puede actualizar.');
        END IF;

        -- Editar aeropuerto existente
        UPDATE AEROPUERTO
        SET NOMBRE = P_NOMBRE,
            CODIGO = P_CODIGO,
            LATITUD = P_LATITUD,
            LONGITUD = P_LONGITUD,
            PAIS = P_PAIS,
            ID_ESTATUS = P_ID_ESTATUS
        WHERE ID_AEROPUERTO = P_ID_AEROPUERTO;

        -- Actualizacion 
        IF SQL%ROWCOUNT = 0 THEN
            RAISE_APPLICATION_ERROR(-20004, 'No se encontró aeropuerto con el ID proporcionado para actualizar');
        END IF;
    ELSE
    
    CALL
        -- Crear nuevo aeropuerto
        INSERT INTO AEROPUERTO (
            ID_AEROPUERTO, NOMBRE, CODIGO, LATITUD, LONGITUD, PAIS, ID_ESTATUS
        ) VALUES (
            AEROPUERTO_SEQ.NEXTVAL, P_NOMBRE, P_CODIGO, P_LATITUD, P_LONGITUD, P_PAIS, P_ID_ESTATUS
        );
    END IF;

    COMMIT;
END;
/


--CREAR O EDITAR AVION
CREATE OR REPLACE PROCEDURE CREAR_EDITAR_AVION(
P_ID_AVION IN NUMBER DEFAULT NULL,
P_NUM_REGISTRO IN NUMBER,
P_TIPO IN VARCHAR2,
P_CODIGO_MODELO IN VARCHAR2,
P_CAPACIDAD IN NUMBER,
P_FECHA_PRIMER_VUELO IN DATE,
P_ID_ESTATUS IN NUMBER,
P_ID_AEROLINEA IN NUMBER
)AS
   
BEGIN
    --SE VALIDA EL CAMPO NOTNULL
    IF P_CODIGO_VUELO  IS NULL OR
    IP_ID_AVION IS NULL OR
    P_ID_ORIGEN IS NULL OR
     P_ID_DESTINO IS NULL OR
     P_FECHA_SALIDA IS NULL OR
     P_ID_ESTATUS IS NULL THEN
     RAISE_APPLICATION_ERROR(-20002, 'Todos los campos son obligatorios');
     END IF;


       -- Validar que el destino no sea igual al origen
    IF P_ID_ORIGEN = P_ID_DESTINO THEN
        RAISE_APPLICATION_ERROR(-20002, 'El origen y el destino no pueden 
ser iguales.');
    END IF;
    
END;
CALL
/

call


--CREAR O EDITAR AVION
CREATE OR REPLACE PROCEDURE CREAR_EDITAR_AVION (
    P_ID_AVION IN NUMBER DEFAULT NULL,
    P_NUM_REGISTRO IN NUMBER,
    P_TIPO IN VARCHAR2,
    P_CODIGO_MODELO IN VARCHAR2,
    P_CAPACIDAD IN NUMBER,
    P_FECHA_PRIMER_VUELO IN DATE,
    P_ID_ESTATUS IN NUMBER,
    P_ID_AEROLINEA IN NUMBER
) IS
    V_EXISTE NUMBER := 0;
BEGIN
    -- Validar campos NOT NULL
    IF P_NUM_REGISTRO IS NULL OR P_TIPO IS NULL OR P_CODIGO_MODELO IS NULL OR P_CAPACIDAD IS NULL OR P_FECHA_PRIMER_VUELO IS NULL OR P_ID_ESTATUS IS NULL OR P_ID_AEROLINEA IS NULL THEN
        RAISE_APPLICATION_ERROR(-20001, 'Todos los campos son obligatorios.');
    END IF;

    -- Validar fecha
    IF P_FECHA_PRIMER_VUELO >= TRUNC(SYSDATE) THEN
        RAISE_APPLICATION_ERROR(-20002, 'La fecha de primer vuelo debe ser anterior a hoy.');
    END IF;

    -- Si se especifica ID, verificar si existe
    IF P_ID_AVION IS NOT NULL THEN
        SELECT COUNT(*) INTO V_EXISTE
        FROM AVION
        WHERE ID_AVION = P_ID_AVION;

        IF V_EXISTE = 0 THEN
            RAISE_APPLICATION_ERROR(-20003, 'El avion con el ID proporcionado no existe. No se puede actualizar.');
        END IF;

        -- Editar avion existente
        UPDATE AVION
        SET NUM_REGISTRO = P_NUM_REGISTRO,
            TIPO = P_TIPO,
            CODIGO_MODELO = P_CODIGO_MODELO,
            CAPACIDAD = P_CAPACIDAD,
            FECHA_PRIMER_VUELO = P_FECHA_PRIMER_VUELO,
            ID_ESTATUS = P_ID_ESTATUS,
            ID_AEROLINEA = P_ID_AEROLINEA
        WHERE ID_AVION = P_ID_AVION;

    ELSE
        -- Crear nuevo avion
        INSERT INTO AVION (
            ID_AVION, NUM_REGISTRO, TIPO, CODIGO_MODELO, CAPACIDAD, FECHA_PRIMER_VUELO, ID_ESTATUS, ID_AEROLINEA
        ) VALUES (
            AVION_SEQ.NEXTVAL, P_NUM_REGISTRO, P_TIPO, P_CODIGO_MODELO, P_CAPACIDAD, P_FECHA_PRIMER_VUELO, P_ID_ESTATUS, P_ID_AEROLINEA
        );
    END IF;

    COMMIT;
END;
/


-- ELIMINA

CREATE OR REPLACE PROCEDURE ELIMINAR_ESTATUS(P_ID_ESTATUS IN NUMBER) IS
    V_COUNT NUMBER := 0;
BEGIN
    -- Verificar relaciones con AEROLINEA, AVION, AEROPUERTO y VUELO
    SELECT COUNT(*) INTO V_COUNT FROM AEROLINEA WHERE ID_ESTATUS = P_ID_ESTATUS;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede eliminar: relacionado con AEROLINEA.');
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM AVION WHERE ID_ESTATUS = P_ID_ESTATUS;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20002, 'No se puede eliminar: relacionado con AVION.');
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM AEROPUERTO WHERE ID_ESTATUS = P_ID_ESTATUS;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20003, 'No se puede eliminar: relacionado con AEROPUERTO.');
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM VUELO WHERE ID_ESTATUS = P_ID_ESTATUS;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20004, 'No se ha eliminado,se esta relacionando con el vuelo.');
    END IF;

    DELETE FROM ESTATUS WHERE ID_ESTATUS = P_ID_ESTATUS;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_AEROLINEA(P_ID_AEROLINEA IN NUMBER) IS
    V_COUNT NUMBER := 0;
    V_ID_EXISTE NUMBER := 0;
BEGIN


     SELECT COUNT(*) INTO V_ID_EXISTE
    FROM AEROLINEA
    WHERE ID_AEROLINEA = P_ID_AEROLINEA;

    IF V_ID_EXISTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'El ID de aerolinea ingresado no existe.');
    END IF;
    
    SELECT COUNT(*) INTO V_COUNT FROM AVION WHERE ID_AEROLINEA = P_ID_AEROLINEA;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20005, 'No se puede eliminar, se esta relacionando con avion .');
    END IF;

    DELETE FROM AEROLINEA WHERE ID_AEROLINEA = P_ID_AEROLINEA;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_AEROPUERTO(P_ID_AEROPUERTO IN NUMBER) IS
    V_COUNT NUMBER := 0;
    V_ID_EXISTE NUMBER := 0;
BEGIN

-- SE AGREGA LA CONDICION POR SI NO EXISTE

 SELECT COUNT(*) INTO V_ID_EXISTE
    FROM AEROPUERTO
    WHERE ID_AEROPUERTO = P_ID_AEROPUERTO;

    IF V_ID_EXISTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'El ID de aeropuerto ingresado no existe.');
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM VUELO WHERE ID_ORIGEN = P_ID_AEROPUERTO OR ID_DESTINO = P_ID_AEROPUERTO;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'No se puede eliminar: relacionado con VUELO como ORIGEN o DESTINO.');
    END IF;

    DELETE FROM AEROPUERTO WHERE ID_AEROPUERTO = P_ID_AEROPUERTO;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_AVION(P_ID_AVION IN NUMBER) IS
    V_COUNT NUMBER := 0;
    V_ID_EXISTE NUMBER := 0;
BEGIN

-- SE AGREGA LA CONDICION POR SI NO EXISTE
 SELECT COUNT(*) INTO V_ID_EXISTE
    FROM AVION
    WHERE ID_AVION = P_ID_AVION;

    IF V_ID_EXISTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'El ID del Avion ingresado no existe');
    END IF;

    SELECT COUNT(*) INTO V_COUNT FROM VUELO WHERE ID_AVION = P_ID_AVION;
    IF V_COUNT > 0 THEN
        RAISE_APPLICATION_ERROR(-20007, 'No se puede eliminar: relacionado con VUELO.');
    END IF;

    DELETE FROM AVION WHERE ID_AVION = P_ID_AVION;
    COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE ELIMINAR_VUELO (
    P_ID_VUELO IN NUMBER
) IS
    V_ID_EXISTE NUMBER := 0;
BEGIN
   -- SE AGREGA LA CONDICION POR SI NO EXISTE

    SELECT COUNT(*) INTO V_ID_EXISTE
    FROM VUELO
    WHERE ID_VUELO = P_ID_VUELO;

    IF V_ID_EXISTE = 0 THEN
        RAISE_APPLICATION_ERROR(-20010, 'El ID del vuelo ingresado no existe');
    END IF;

    -- Eliminar vuelo
    DELETE FROM VUELO
    WHERE ID_VUELO = P_ID_VUELO;

    COMMIT;
END;
/

-- CONDICIONES PARA ELIMINAR

-- Eliminar vuelo
CALL ELIMINAR_VUELO();

-- Eliminar avión (solo si no tiene vuelos asociados)
CALL ELIMINAR_AVION();

-- Eliminar aeropuerto (solo si no tiene vuelos asociados)
CALL ELIMINAR_AEROPUERTO();

-- Eliminar aerolínea (solo si no tiene aviones asociados)
CALL ELIMINAR_AEROLINEA();

-- Eliminar estatus (solo si no está siendo usado)
CALL ELIMINAR_ESTATUS();

-- Condicion para insertar un nuevo estatus
CALL SP_UPSERT_ESTATUS(2, 'Inactivo');

-- Condicion para actualizar un estatus existente
CALL SP_UPSERT_ESTATUS(1, 'Activo (Modificado)');

-- Condicion para crear nueva aerolínea (NO SE AGREGA ID)
CALL CREAR_EDITAR_AEROLINEA( P_NOMBRE => 'Nueva Aerolínea', P_IATA => 'NAL', P_PAIS => 'México',
    P_FECHA_FUNDACION => TO_DATE('2020-01-01', 'YYYY-MM-DD'), P_ID_ESTATUS => 1
);

-- Condicion para Actualizar aerolínea existente
CALL CREAR_EDITAR_AEROLINEA( P_ID_AEROLINEA => 1, P_NOMBRE => 'Aerolínea Mexicana (Actualizada)', P_IATA => 'MXA',
P_PAIS => 'México', P_FECHA_FUNDACION => TO_DATE('2000-01-01', 'YYYY-MM-DD'),P_ID_ESTATUS => 1
);

-- Crear nuevo aeropuerto
CALL CREAR_EDITAR_AEROPUERTO( P_NOMBRE => 'Aeropuerto Internacional de Cancún', P_CODIGO => 'CUN', P_LATITUD => '21.036111',
P_LONGITUD => '-86.876944', P_PAIS => 'México',P_ID_ESTATUS => 1
);

-- Condicion para aeropuerto existente
CALL CREAR_EDITAR_AEROPUERTO( P_ID_AEROPUERTO => 1, P_NOMBRE => 'Aeropuerto El Dorado (Actualizado)', P_CODIGO => 'BOG',
    P_LATITUD => '4.70159', P_LONGITUD => '-74.1469', P_PAIS => 'Colombia', P_ID_ESTATUS => 1
);

-- Condicion para crear nuevo avión
CALL CREAR_EDITAR_AVION(P_NUM_REGISTRO => 1234, P_TIPO => 'Boeing 737', P_CODIGO_MODELO => '737-800',
 P_CAPACIDAD => 180, P_FECHA_PRIMER_VUELO => TO_DATE('2018-05-15', 'YYYY-MM-DD'), P_ID_ESTATUS => 1, P_ID_AEROLINEA => 1
);

-- Condicion para actualizar avión existente
CALL CREAR_EDITAR_AVION( P_ID_AVION => 1, P_NUM_REGISTRO => 2010, P_TIPO => 'Airbus A320 (Actualizado)', P_CODIGO_MODELO => '320214',
    P_CAPACIDAD => 180,P_FECHA_PRIMER_VUELO => TO_DATE('2015-03-15', 'YYYY-MM-DD'),P_ID_ESTATUS => 1,
    P_ID_AEROLINEA => 2
);

-- Condicion para crear nuevo vuelo
CALL CREAR_EDITAR_VUELO(P_CODIGO_VUELO => 'MX123', P_ID_AVION => 1,P_ID_ORIGEN => 1,
 P_ID_DESTINO => 2, P_FECHA_SALIDA => TO_DATE('2023-12-01 08:00', 'YYYY-MM-DD HH24:MI'),P_ID_ESTATUS => 1
);

-- Condicion para actualizar vuelo existente
CALL CREAR_EDITAR_VUELO( P_ID_VUELO => 1, P_CODIGO_VUELO => '44203', P_ID_AVION => 3, P_ID_ORIGEN => 3,
 P_ID_DESTINO => 2, P_FECHA_SALIDA => TO_DATE('2023-06-25 08:30', 'YYYY-MM-DD HH24:MI'), P_ID_ESTATUS => 1
);
